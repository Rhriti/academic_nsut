Program 1:
G=[1 1 0 0 1 0 1; 0 1 1 1 1 0 0; 1 1 1 0 0 1 1];
B=[0 0 0;0 0 1; 0 1 0; 0 1 1; 1 0 0; 1 0 1; 1 1 0; 1 1 1];
fprintf('Generator Matrix:\n')
G
fprintf('\nMessage:\n')
B
C=zeros([8,7]);
for i=1:8
    for j=1:7
        for k=1:3
            C(i,j)=C(i,j)+B(i,k)*G(k,j);
        end
    end
end
for m=1:8
    for n=1:7
        if(C(m,n)==2)
            C(m,n)=0;
        elseif(C(m,n)==3)
            C(m,n)=1;
        end
    end
end
fprintf('\nCodewords:\n')
C

Explanation: 
G is the generator matrix
3Ã—7 are its dimensions
There are 2^3 codewords,one for each each message signal, i.e, 0 to 7 in binary
We multiply the matrices and do mod 2 addition

Program 2:
dcp clear all; close all;
m= randi([0,1],1,N); %N is any numerical value (greater than or equal to 10000 for decent results)
for i=1:N
 if m(i)==0
   x(i)=0 
 else 
   x(i)=1
ber_sim=[]
ber_th=[]
for EbNo=0:1:15
 EbNo1=db2pow(EbNo)
 sigma1=(1/(2*EbNo))^(1/2)
 r=x + sigma1 * randn(1,N)
end
 m_cap = ( r> 0.5)   % logical array
 err1 = sum(m~= m_cap) % approx. check
 ber1 = err1/N
 plot(ber1)

Explanation:
initialized x which is the bpsk signal and r is the received signal with the added gaussian noise
that value is being rounded off to either 0 or 1 based on the threshold
then you have to compare r with x and set a counter for the values that are different
that number divided by the total number of values in x is the ber